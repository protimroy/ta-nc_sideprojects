//////////////////////////////////////////////////////////////
//                                                          //
// This testbench has been generated by the Verilog         //
// testbench generator                .                     //
// Copyright (c) 2012-2022 EDAUtils LLP                 //
// Contact help@edautils.com  for support/info.//
//                                                          //
//                                                          //
//////////////////////////////////////////////////////////////
//
//
// Generated by : protim on 4/24/25, 4:27 AM
//
//
module testbench;
	reg [0:86] indata_array;
	reg bench_reset;
	wire bench_clk;
	wire bench_s0_waitrequest;
	wire [31:0]bench_s0_readdata;
	wire bench_s0_readdatavalid;
	wire [1:0]bench_s0_response;
	wire [0:0]bench_s0_burstcount;
	wire [31:0]bench_s0_writedata;
	wire [9:0]bench_s0_address;
	wire bench_s0_write;
	wire bench_s0_read;
	wire [3:0]bench_s0_byteenable;
	wire bench_s0_debugaccess;
	wire bench_m0_waitrequest;
	wire [31:0]bench_m0_readdata;
	wire bench_m0_readdatavalid;
	wire [1:0]bench_m0_response;
	wire [0:0]bench_m0_burstcount;
	wire [31:0]bench_m0_writedata;
	wire [9:0]bench_m0_address;
	wire bench_m0_write;
	wire bench_m0_read;
	wire [3:0]bench_m0_byteenable;
	wire bench_m0_debugaccess;



	assign bench_clk = indata_array[0:0];
	assign bench_s0_burstcount = indata_array[1:1];
	assign bench_s0_writedata = indata_array[2:33];
	assign bench_s0_address = indata_array[34:43];
	assign bench_s0_write = indata_array[44:44];
	assign bench_s0_read = indata_array[45:45];
	assign bench_s0_byteenable = indata_array[46:49];
	assign bench_s0_debugaccess = indata_array[50:50];
	assign bench_m0_waitrequest = indata_array[51:51];
	assign bench_m0_readdata = indata_array[52:83];
	assign bench_m0_readdatavalid = indata_array[84:84];
	assign bench_m0_response = indata_array[85:86];

	initial
	begin
    $dumpfile("91.vcd");
    $dumpvars(1, testbench);
		#10 bench_reset = 1'b0;
	end

	always
	begin
		#5  indata_array = $random;
	end

	altera_avalon_mm_bridge inst(
        .clk(bench_clk), 
        .reset(bench_reset), 
        .s0_waitrequest(bench_s0_waitrequest), 
        .s0_readdata(bench_s0_readdata), 
        .s0_readdatavalid(bench_s0_readdatavalid), 
        .s0_response(bench_s0_response), 
        .s0_burstcount(bench_s0_burstcount), 
        .s0_writedata(bench_s0_writedata), 
        .s0_address(bench_s0_address), 
        .s0_write(bench_s0_write), 
        .s0_read(bench_s0_read), 
        .s0_byteenable(bench_s0_byteenable), 
        .s0_debugaccess(bench_s0_debugaccess), 
        .m0_waitrequest(bench_m0_waitrequest), 
        .m0_readdata(bench_m0_readdata), 
        .m0_readdatavalid(bench_m0_readdatavalid), 
        .m0_response(bench_m0_response), 
        .m0_burstcount(bench_m0_burstcount), 
        .m0_writedata(bench_m0_writedata), 
        .m0_address(bench_m0_address), 
        .m0_write(bench_m0_write), 
        .m0_read(bench_m0_read), 
        .m0_byteenable(bench_m0_byteenable), 
        .m0_debugaccess(bench_m0_debugaccess)
    );

	initial
	begin
		$monitor($time, " bench_reset = %b, clk = %b , s0_burstcount = %b , s0_writedata = %b , s0_address = %b , s0_write = %b , s0_read = %b , s0_byteenable = %b , s0_debugaccess = %b , m0_waitrequest = %b , m0_readdata = %b , m0_readdatavalid = %b , m0_response = %b , s0_waitrequest = %b , s0_readdata = %b , s0_readdatavalid = %b , s0_response = %b , m0_burstcount = %b , m0_writedata = %b , m0_address = %b , m0_write = %b , m0_read = %b , m0_byteenable = %b , m0_debugaccess = %b  ",
			bench_reset, bench_clk, bench_s0_burstcount, bench_s0_writedata, bench_s0_address, bench_s0_write, bench_s0_read, bench_s0_byteenable, bench_s0_debugaccess, bench_m0_waitrequest, bench_m0_readdata, bench_m0_readdatavalid, bench_m0_response, bench_s0_waitrequest, bench_s0_readdata, bench_s0_readdatavalid, bench_s0_response, bench_m0_burstcount, bench_m0_writedata, bench_m0_address, bench_m0_write, bench_m0_read, bench_m0_byteenable, bench_m0_debugaccess);
	end

	initial
	begin
		#199 $finish;
	end

endmodule
