//////////////////////////////////////////////////////////////
//                                                          //
// This testbench has been generated by the Verilog         //
// testbench generator                .                     //
// Copyright (c) 2012-2022 EDAUtils LLP                 //
// Contact help@edautils.com  for support/info.//
//                                                          //
//                                                          //
//////////////////////////////////////////////////////////////
//
//
// Generated by : protim on 4/24/25, 4:15 AM
//
//
module testbench;
	reg [0:104] indata_array;
	reg bench_reset;
	wire bench_rst;
	wire bench_clk;
	wire bench_cpu_stall;
	wire [31:0]bench_if_pc;
	wire [31:0]bench_if_inst;
	wire bench_wb_rfw;
	wire [4:0]bench_wb_rf_waddr;
	wire [31:0]bench_wb_rf_wdata;
	wire bench_int_flush;
	wire [31:0]bench_p_rfa;
	wire [31:0]bench_p_rfb;
	wire [31:0]bench_p_se;
	wire [4:0]bench_p_shamt;
	wire [5:0]bench_p_func;
	wire [4:0]bench_p_rf_waddr;
	wire bench_p_c_rfw;
	wire [1:0]bench_p_c_wbsource;
	wire [1:0]bench_p_c_drw;
	wire [5:0]bench_p_c_alucontrol;
	wire bench_p_c_j;
	wire bench_p_c_b;
	wire bench_p_c_jjr;
	wire [25:0]bench_p_jaddr;
	wire [31:0]bench_p_pc;
	wire bench_p_c_rfbse;
	wire [4:0]bench_p_rs;
	wire [4:0]bench_p_rt;
	wire bench_c_stall;



	assign bench_rst = indata_array[0:0];
	assign bench_clk = indata_array[1:1];
	assign bench_cpu_stall = indata_array[2:2];
	assign bench_if_pc = indata_array[3:34];
	assign bench_if_inst = indata_array[35:66];
	assign bench_wb_rfw = indata_array[67:67];
	assign bench_wb_rf_waddr = indata_array[68:72];
	assign bench_wb_rf_wdata = indata_array[73:104];
	assign bench_int_flush = indata_array[105:105];

	initial
	begin
    $dumpfile("76.vcd");
    $dumpvars(1, testbench);
		#10 bench_reset = 1'b0;
	end

	always
	begin
		#5  indata_array = $random;
	end

	cpu_id inst(
        .rst(bench_rst), 
        .clk(bench_clk), 
        .cpu_stall(bench_cpu_stall), 
        .if_pc(bench_if_pc), 
        .if_inst(bench_if_inst), 
        .wb_rfw(bench_wb_rfw), 
        .wb_rf_waddr(bench_wb_rf_waddr), 
        .wb_rf_wdata(bench_wb_rf_wdata), 
        .int_flush(bench_int_flush), 
        .p_rfa(bench_p_rfa), 
        .p_rfb(bench_p_rfb), 
        .p_se(bench_p_se), 
        .p_shamt(bench_p_shamt), 
        .p_func(bench_p_func), 
        .p_rf_waddr(bench_p_rf_waddr), 
        .p_c_rfw(bench_p_c_rfw), 
        .p_c_wbsource(bench_p_c_wbsource), 
        .p_c_drw(bench_p_c_drw), 
        .p_c_alucontrol(bench_p_c_alucontrol), 
        .p_c_j(bench_p_c_j), 
        .p_c_b(bench_p_c_b), 
        .p_c_jjr(bench_p_c_jjr), 
        .p_jaddr(bench_p_jaddr), 
        .p_pc(bench_p_pc), 
        .p_c_rfbse(bench_p_c_rfbse), 
        .p_rs(bench_p_rs), 
        .p_rt(bench_p_rt), 
        .c_stall(bench_c_stall)
    );

	initial
	begin
		$monitor($time, " bench_reset = %b, rst = %b , clk = %b , cpu_stall = %b , if_pc = %b , if_inst = %b , wb_rfw = %b , wb_rf_waddr = %b , wb_rf_wdata = %b , int_flush = %b , p_rfa = %b , p_rfb = %b , p_se = %b , p_shamt = %b , p_func = %b , p_rf_waddr = %b , p_c_rfw = %b , p_c_wbsource = %b , p_c_drw = %b , p_c_alucontrol = %b , p_c_j = %b , p_c_b = %b , p_c_jjr = %b , p_jaddr = %b , p_pc = %b , p_c_rfbse = %b , p_rs = %b , p_rt = %b , c_stall = %b  ",
			bench_reset, bench_rst, bench_clk, bench_cpu_stall, bench_if_pc, bench_if_inst, bench_wb_rfw, bench_wb_rf_waddr, bench_wb_rf_wdata, bench_int_flush, bench_p_rfa, bench_p_rfb, bench_p_se, bench_p_shamt, bench_p_func, bench_p_rf_waddr, bench_p_c_rfw, bench_p_c_wbsource, bench_p_c_drw, bench_p_c_alucontrol, bench_p_c_j, bench_p_c_b, bench_p_c_jjr, bench_p_jaddr, bench_p_pc, bench_p_c_rfbse, bench_p_rs, bench_p_rt, bench_c_stall);
	end

	initial
	begin
		#199 $finish;
	end

endmodule
