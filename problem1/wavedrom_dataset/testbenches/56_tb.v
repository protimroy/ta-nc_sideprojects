//////////////////////////////////////////////////////////////
//                                                          //
// This testbench has been generated by the Verilog         //
// testbench generator                .                     //
// Copyright (c) 2012-2022 EDAUtils LLP                 //
// Contact help@edautils.com  for support/info.//
//                                                          //
//                                                          //
//////////////////////////////////////////////////////////////
//
//
// Generated by : protim on 4/24/25, 4:06 AM
//
//
module testbench;
	reg [0:107] indata_array;
	reg bench_reset;
	wire bench_ARESET;
	wire bench_ACLK;
	wire bench_cmd_valid;
	wire bench_cmd_fix;
	wire bench_cmd_modified;
	wire bench_cmd_complete_wrap;
	wire bench_cmd_packed_wrap;
	wire [2:0]bench_cmd_first_word;
	wire [2:0]bench_cmd_next_word;
	wire [2:0]bench_cmd_last_word;
	wire [2:0]bench_cmd_offset;
	wire [2:0]bench_cmd_mask;
	wire [3:0]bench_cmd_step;
	wire [7:0]bench_cmd_length;
	wire bench_cmd_ready;
	wire [63:0]bench_S_AXI_WDATA;
	wire [7:0]bench_S_AXI_WSTRB;
	wire bench_S_AXI_WLAST;
	wire bench_S_AXI_WVALID;
	wire bench_S_AXI_WREADY;
	wire [31:0]bench_M_AXI_WDATA;
	wire [3:0]bench_M_AXI_WSTRB;
	wire bench_M_AXI_WLAST;
	wire bench_M_AXI_WVALID;
	wire bench_M_AXI_WREADY;



	assign bench_ARESET = indata_array[0:0];
	assign bench_ACLK = indata_array[1:1];
	assign bench_cmd_valid = indata_array[2:2];
	assign bench_cmd_fix = indata_array[3:3];
	assign bench_cmd_modified = indata_array[4:4];
	assign bench_cmd_complete_wrap = indata_array[5:5];
	assign bench_cmd_packed_wrap = indata_array[6:6];
	assign bench_cmd_first_word = indata_array[7:9];
	assign bench_cmd_next_word = indata_array[10:12];
	assign bench_cmd_last_word = indata_array[13:15];
	assign bench_cmd_offset = indata_array[16:18];
	assign bench_cmd_mask = indata_array[19:21];
	assign bench_cmd_step = indata_array[22:25];
	assign bench_cmd_length = indata_array[26:33];
	assign bench_S_AXI_WDATA = indata_array[34:97];
	assign bench_S_AXI_WSTRB = indata_array[98:105];
	assign bench_S_AXI_WLAST = indata_array[106:106];
	assign bench_S_AXI_WVALID = indata_array[107:107];
	assign bench_M_AXI_WREADY = indata_array[108:108];

	initial
	begin
    $dumpfile("56.vcd");
    $dumpvars(1, testbench);
		#10 bench_reset = 1'b0;
	end

	always
	begin
		#5  indata_array = $random;
	end

	axi_dwidth_converter_v2_1_8_w_upsizer inst(
        .ARESET(bench_ARESET), 
        .ACLK(bench_ACLK), 
        .cmd_valid(bench_cmd_valid), 
        .cmd_fix(bench_cmd_fix), 
        .cmd_modified(bench_cmd_modified), 
        .cmd_complete_wrap(bench_cmd_complete_wrap), 
        .cmd_packed_wrap(bench_cmd_packed_wrap), 
        .cmd_first_word(bench_cmd_first_word), 
        .cmd_next_word(bench_cmd_next_word), 
        .cmd_last_word(bench_cmd_last_word), 
        .cmd_offset(bench_cmd_offset), 
        .cmd_mask(bench_cmd_mask), 
        .cmd_step(bench_cmd_step), 
        .cmd_length(bench_cmd_length), 
        .cmd_ready(bench_cmd_ready), 
        .S_AXI_WDATA(bench_S_AXI_WDATA), 
        .S_AXI_WSTRB(bench_S_AXI_WSTRB), 
        .S_AXI_WLAST(bench_S_AXI_WLAST), 
        .S_AXI_WVALID(bench_S_AXI_WVALID), 
        .S_AXI_WREADY(bench_S_AXI_WREADY), 
        .M_AXI_WDATA(bench_M_AXI_WDATA), 
        .M_AXI_WSTRB(bench_M_AXI_WSTRB), 
        .M_AXI_WLAST(bench_M_AXI_WLAST), 
        .M_AXI_WVALID(bench_M_AXI_WVALID), 
        .M_AXI_WREADY(bench_M_AXI_WREADY)
    );

	initial
	begin
		$monitor($time, " bench_reset = %b, ARESET = %b , ACLK = %b , cmd_valid = %b , cmd_fix = %b , cmd_modified = %b , cmd_complete_wrap = %b , cmd_packed_wrap = %b , cmd_first_word = %b , cmd_next_word = %b , cmd_last_word = %b , cmd_offset = %b , cmd_mask = %b , cmd_step = %b , cmd_length = %b , S_AXI_WDATA = %b , S_AXI_WSTRB = %b , S_AXI_WLAST = %b , S_AXI_WVALID = %b , M_AXI_WREADY = %b , cmd_ready = %b , S_AXI_WREADY = %b , M_AXI_WDATA = %b , M_AXI_WSTRB = %b , M_AXI_WLAST = %b , M_AXI_WVALID = %b  ",
			bench_reset, bench_ARESET, bench_ACLK, bench_cmd_valid, bench_cmd_fix, bench_cmd_modified, bench_cmd_complete_wrap, bench_cmd_packed_wrap, bench_cmd_first_word, bench_cmd_next_word, bench_cmd_last_word, bench_cmd_offset, bench_cmd_mask, bench_cmd_step, bench_cmd_length, bench_S_AXI_WDATA, bench_S_AXI_WSTRB, bench_S_AXI_WLAST, bench_S_AXI_WVALID, bench_M_AXI_WREADY, bench_cmd_ready, bench_S_AXI_WREADY, bench_M_AXI_WDATA, bench_M_AXI_WSTRB, bench_M_AXI_WLAST, bench_M_AXI_WVALID);
	end

	initial
	begin
		#199 $finish;
	end

endmodule
